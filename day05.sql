SELECT FIRST_NAME ||' '|| LAST_NAME FROM EMPLOYEES ;

SELECT FIRST_NAME || '의 급여는' || SALARY FROM EMPLOYEES ;

SELECT COUNT(SALARY) AS 개수,MAX(SALARY)AS 최대값,MIN(SALARY)AS 최소값,SUM(SALARY)AS 총합, AVG(SALARY)AS 평균 FROM EMPLOYEES ;

-- 사원테이블에서 
SELECT EMPLOYEE_ID AS 사번, FIRST_NAME AS 이름, SALARY AS 급여 FROM EMPLOYEES;

-- 두 개 이상의 테이블에서 컬럼을 조회할 때 어 떤 테이블에서 온 컬럼인지 확실하게 적어줘야한다.
SELECT e.DEPARTMENT_ID, d.DEPARTMENT_ID
FROM EMPLOYEES e , DEPARTMENTS d ;


-- 사원테이블에는 부서명이 없EK.
-- 부서테이블에는 DEPARTMENT_ID 컬럼을 PK로 가지고 있다.
-- 사원테이블에는 DEPARTMENT_ID 컬럼을 FK로 가지고 있다.

SELECT E.FIRST_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

SELECT d.DEPARTMENT_NAME , l.CITY FROM DEPARTMENTS d JOIN LOCATIONS l
ON d.LOCATION_ID = l.LOCATION_ID ; 

SELECT L.CITY, C.COUNTRY_NAME FROM LOCATIONS L JOIN COUNTRIES C
ON L.COUNTRY_ID = C.COUNTRY_ID  ;

SELECT E.FIRST_NAME, E.LAST_NAME, E.JOB_ID, J.JOB_TITLE FROM EMPLOYEES E JOIN JOBS J 
ON E.JOB_ID = J.JOB_ID ;

SELECT E.FIRST_NAME, E.EMAIL, E.DEPARTMENT_ID, D.DEPARTMENT_NAME, L.LOCATION_ID, L.CITY
FROM EMPLOYEES E JOIN DEPARTMENTS D
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
JOIN LOCATIONS L
ON D.LOCATION_ID = L.LOCATION_ID ;

SELECT E2.ENAME 직원, E2.MGR 상사, E1.ENAME, E1.EMPNO
FROM EMP E1 JOIN EMP E2
ON E1.EMPNO = E2.MGR;


CREATE TABLE 테이블A(
A_id NUMBER,
A_name varchar2(10)
);

CREATE TABLE 테이블B(
B_id NUMBER,
B_name varchar2(10)
);

INSERT  ALL
	 INTO 테이블A values(1, 'John')
	 INTO 테이블A values(2, 'Jane')
	 INTO 테이블A values(3, 'Bob')
	 INTO 테이블B values(101, 'Apple')
	 INTO 테이블B values(102, 'Banana')
	SELECT * FROM DUAL;
	
SELECT * FROM 테이블A CROSS JOIN 테이블B;

-- 사원테이블과 부서테이블의 LEFT OUTER JOIN을 이용하여 사원이 어느 부서에 있는지 조회하기
SELECT FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES E LEFT OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ;

SELECT FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES e RIGHT OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID  = D.DEPARTMENT_ID ;

SELECT FIRST_NAME, DEPARTMENT_NAME
FROM EMPLOYEES e FULL OUTER JOIN DEPARTMENTS d 
ON E.DEPARTMENT_ID  = D.DEPARTMENT_ID ;

-- TEAM 테이블과 STADIUM 테이블을 통해 홈팀이 있는 구장만 팀 이름과 구장이름으로 조회
SELECT TEAM_NAME, STADIUM_NAME
FROM TEAM t LEFT OUTER JOIN STADIUM s 
ON T.STADIUM_ID = S.STADIUM_ID ;

-- 누가 얼마받는지에 대한 조회
CREATE VIEW MY_EMPL AS(
	SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
	FROM EMPLOYEES
);

SELECT  * FROM MY_EMPL;

CREATE OR REPLACE VIEW MY_EMPL AS(
	SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
	FROM EMPLOYEES
);

SELECT * FROM PLAYER;

CREATE OR REPLACE VIEW PLAYER_AGE AS(
	SELECT PLAYER_NAME, ROUND((SYSDATE - BIRTH_DATE)/365)AGE
	FROM PLAYER
);

SELECT * FROM PLAYER_AGE
WHERE AGE >= 30;

-- DATA_PLUS
-- 급여를 많이 받는 순으로 순위와 이름, 급여를 조회하는 쿼리 넣기
CREATE OR REPLACE VIEW DATA_PLUS AS(
	SELECT DENSE_RANK() OVER(ORDER BY SALARY DESC)"RANK", FIRST_NAME, SALARY 
	FROM EMPLOYEES
);

SELECT * FROM DATA_PLUS;

CREATE OR REPLACE VIEW PLAYER_TEAM_NAME AS(
	SELECT P.*, TEAM_NAME
	FROM PLAYER P JOIN TEAM t 
	ON P.TEAM_ID = T.TEAM_ID
);

SELECT * FROM PLAYER_TEAM_NAME;

CREATE OR REPLACE VIEW STADIUM_INFO AS(
SELECT HOMETEAM_ID,STADIUM_NAME,TEAM_NAME
FROM STADIUM s LEFT OUTER JOIN TEAM t 
ON S.STADIUM_ID = T.STADIUM_ID 
);

SELECT * FROM STADIUM_INFO;

CREATE OR REPLACE VIEW STADIUM_INFO_2 AS(
SELECT HOMETEAM_ID,STADIUM_NAME,TEAM_NAME
FROM STADIUM s LEFT OUTER JOIN TEAM t 
ON S.STADIUM_ID = T.STADIUM_ID 
); 

-- EMPLOYEES 테이블에서 JOBID가 ITPROG인 사람의 이름을 자신의 이름으로 바꾸기
UPDATE EMPLOYEES SET 
FIRST_NAME = '서준익'
WHERE JOB_ID = 'IT_PROG';

SELECT * FROM EMPLOYEES e 
WHERE JOB_ID = 'IT_PROG';

-- 데이터베이스에 영향을 주는 INSERT, UPDATE, DELETE 문에서 많이 사용된다.